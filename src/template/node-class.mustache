/*jshint -W069 */
/**
* {{&description}}
* @class {{&className}}
* @param {(string|object)} [domainOrOptions] - The project domain or options object. If object, see the object's optional properties.
* @param {string} [domainOrOptions.domain] - The project domain
* @param {object} [domainOrOptions.token] - auth token - object with value property and optional headerOrQueryName and isQuery properties
*/
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} {{&className}} = (function(){
'use strict';

{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} request = require('request');
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} Q = require('q');
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} fs = require('fs');
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} path = require('path');
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} lodash = require('lodash');
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} crypto = require('crypto');
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} CryptoJS = require('crypto-js');
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} uuid = require('uuid');

/**
* 构造函数
* @param{string} options.accessId - 密钥ID
* @param{string} options.accessKey - 由平台系统和accessId一起生成，签名的密钥，严格保密只有平台方和用户知道
* @param{string} options.domain - BaaS API服务地址（可选）
* @param{string} options.ca - https证书（可选）
* @param{boolean} options.debug - 是否启用debug模式（可以打印出日志）（可选）
*/
function {{&className}}(options){
if(!lodash.isPlainObject(options) || !options.domain || !options.accessKey || !options.accessId){
throw Error('Illegal parameters: All of options.doamin, options.accessKey and options.accessId is required!');
}
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} domain = options.domain;
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} ca = options.ca;

this.debug = options.debug;
this.accessKey = options.accessKey;
this.accessId = options.accessId;
this.domain = domain ? domain : '{{&domain}}';

if(/^https:\/\//.test(this.domain)){
this.ca = ca||fs.readFileSync(path.join(__dirname, '{{&ca}}')); // For https
}
if(this.domain.length === 0) {
throw new Error('Domain parameter must be specified as a string.');
}
}

/**
* 日志记录
* @param msg
*/
function logger(ctx, msg){
if(ctx.debug){
console.log.apply(console, Array.prototype.slice.call(arguments, 1));
}
}

/**
* 包装请求参数
* @param method
* @param params
* @param accessKey
* @param accessId
* @param req
*/
function wrap4SignatureKey(method, params, accessKey, accessId, req){
if(!Object.keys(params).length){
logger(this, 'No parameters given', params);
}
delete params['sessionToken'];
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} authCode = genAuthCode.call(this, method, accessKey, accessId, undefined, params, undefined);
logger(this, 'authCode: ', authCode);
req.headers['authCode'] = authCode;
}

/**
* 生成authCode
* @param{string} requestMethod
* @param{string} ak accessKey
* @param{string} accessId
* @param{string} nonce 随机字符串
* @param{object} params
* @param{string} timestamp
* @returns {string} authCode（形如：accessId=EUqV2yIU&nonce=B2d1a32w112a3ldkKDKNEN&timestamp=1501661974308&signature=gGORxQcvvKG%2B2kp8%2FwgnRM5nvlA%3D）
*/
function genAuthCode(requestMethod, ak, accessId, nonce, params, timestamp) {
// 1. 获得authPerfixString
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} arr = [];
arr.push('accessId=' + accessId);
arr.push('nonce=' + (!nonce ? uuid.v1() : nonce));
arr.push('timestamp=' + (!timestamp ? Date.now() : timestamp));
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} authPerfixString = arr.join('&');
logger(this, 'authPrefixString: ', authPerfixString);

// 2. 获得signature
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} signingKey = CryptoJS.HmacSHA1(authPerfixString, ak).toString(CryptoJS.enc.Base64);
logger(this, 'signingKey: ', signingKey);

// 3. 获取signatureContent
arr = [];

{{#isES6}}
for (let key of Object.keys(params).sort()) {
let value = params[key];
value = lodash.isArray(value) || lodash.isPlainObject(value) ? JSON.stringify(value) : value;
arr.push([key, encodeURIComponent(value)].join('='));
}
{{/isES6}}

{{^isES6}}
    var paramsKeyArr = Object.keys(params).sort();
    for(var i = 0, len = paramsKeyArr.length; i < len; i++){
    var paramsKey = paramsKeyArr[i];
    var value = params[paramsKey];
    value = lodash.isArray(value) || lodash.isPlainObject(value) ? JSON.stringify(value) : value;
    if(value || lodash.isNumber(value)){
    arr.push([paramsKey, encodeURIComponent(value)].join('='));
    }
    }
{{/isES6}}

{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} signatureContent = requestMethod.toUpperCase() + '-' + arr.join('&');
logger(this, 'signatureContent: ', signatureContent);

// 4. 获得signature
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} signature = CryptoJS.HmacSHA1(signatureContent, signingKey).toString(CryptoJS.enc.Base64);
return (authPerfixString + '&signature=' + encodeURIComponent(signature));
}

function mergeQueryParams(parameters, queryParameters) {
if (parameters.$queryParameters) {
Object.keys(parameters.$queryParameters)
.forEach(function(parameterName) {
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} parameter = parameters.$queryParameters[parameterName];
queryParameters[parameterName] = parameter;
});
}
return queryParameters;
}

/**
* HTTP Request
* @method
* @name {{&className}}#request
* @param {object} options
* @param {string} options.method - http method
* @param {string} options.url - url to do request
* @param {object} options.parameters
* @param {object} options.body - body parameters / object
* @param {object} options.headers - header parameters
* @param {object} options.queryParameters - querystring parameters
* @param {object} options.form - form data object
* @param {object} deferred - promise object
*/
{{&className}}.prototype.request = function(options, deferred){
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} method = options.method,
url = options.url,
parameters = options.parameters,
pathParameter = options.pathParameters,
body = options.body,
headers = options.headers,
queryParameters = options.queryParameters,
form = options.form;
{{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} req = {
method: method,
uri: this.domain + url,
qs: queryParameters,
headers: headers,
body: body
};

wrap4SignatureKey.call(this, method, lodash.assign({}, pathParameter, queryParameters), this.accessKey, this.accessId, req);

if(this.ca){
req.ca = this.ca;
}

if(Object.keys(form).length > 0) {
req.form = form;
}
if(typeof(body) === 'object' && !(body instanceof Buffer)) {
req.json = true;
}
logger(this, 'Request: ', JSON.stringify(req));
request(req, function(error, response, body){
if(error) {
logger(this, 'error: ', error.message);
deferred.reject(error);
return;
}
logger(this, 'Response: statusCode=%s | statusMessage=%s | body=%s',
response.statusCode, response.statusMessage, JSON.stringify(body));
if(/^application\/(.*\\+)?json/.test(response.headers['content-type'])) {
try {
body = JSON.parse(body);
} catch(e) {}
}
if(response.statusCode >= 200 && response.statusCode <= 299) {
deferred.resolve({
status:response.statusCode,
statusMessage: response.statusMessage,
response: response,
body: body
});
} else {
deferred.reject({
status:response.statusCode,
statusMessage: response.statusMessage,
response: response,
body: body
});
}
});
};

{{#methods}}
    {{> method}}
{{/methods}}

return {{&className}};
})();

module.exports = {{&className}};
